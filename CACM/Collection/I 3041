occuring trees keys median fast lookup technique frequently split trees searching technique sets split keys highly frequency skewed distributions search tree binary split node key values node maximally key split subtree frequent remaining keys partitions ordering left respect lexical median tree subtrees split mst median lexical descendents split node tree perfectly force search representation efficient space achieving balanced high search tree speed unlike trees cost search binary frequency ordered search successful bounded mst log stable values mst minimal ordering key set built frequencies time n2 opposed log discussion optimum search tree binary application lookup dictionary english mst obtained performance contrasted presented techniques search tree lookup binary dictionary heaps zipf trees retrieval information law balanced 