logic programming languages answers logic terested long questions computable principle possibilities puts outcome bounds recently comparisons precise formalization efficiency methods decision complexity theory developments logic applications question big logic significance methods applied parts direction languages theory offer programming computability syntactic opportunity formalization obvious semantical advanced theory complete examples ranging give wide mathematical queries answers machine computable process process naturally machine programs simulate descriptions processes enter giving meaning program precise definition objects requires explain computation statics problem transformed dynamics theories nets automata formalized teresting dynamics portion field concentration finite algebraic state higher understanding level aspects infinite program involves features levels forces objects pass ideas explanation conceptual levels simulation final machine real made find exact mathematically abstractions structures represent experience workers independent method types data partial lattices ordering orderings content information mappings demonstrated continuous providing flexibility definitions approach proofs clean dependence undue implementations remains showing abstract conceptualizations actualized say unified theory logic languages denotational automata programming semantics calculus models computability partial spaces functions approximation function 