languages logic programming terested answers long logic principle computable questions outcome possibilities puts bounds precise recently formalization comparisons decision efficiency methods theory complexity developments big logic question applications significance methods logic parts applied direction theory computability programming offer languages syntactic opportunity formalization obvious semantical theory advanced complete examples wide give ranging mathematical answers queries machine computable process programs process naturally machine simulate enter giving descriptions processes precise meaning definition program explain requires objects statics computation problem transformed dynamics theories automata nets teresting dynamics formalized portion field state algebraic finite concentration higher level understanding aspects involves infinite program features pass levels forces objects ideas explanation conceptual real simulation final machine levels find made exact mathematically structures abstractions represent workers independent experience method lattices data types partial information content orderings ordering continuous mappings demonstrated definitions flexibility providing approach clean proofs dependence undue implementations remains showing abstract conceptualizations say actualized theory unified programming automata denotational languages logic calculus semantics computability models function spaces functions approximation partial 