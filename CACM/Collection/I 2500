practical managing resources deadlocks approach avoiding allocation expensive resource scheduling regard space multiprogramming time involving sharing numbers environments time large requirements tasks conflicting resources require prevention deadlocks detection additional efficient massive overhead amounts usage maintained resource resources program management linked large lists overcome techniques program portion overhead general scale part running purpose large operating keeps resources system deadlocks detect prevent active state implemented levels permit deadlock comprehensive additional prevention detection cost running due incorporated system infrequency situations deadlock allocation resource deadlock scheduling management sharing multiprogramming time embrace multiprocessing deadly 