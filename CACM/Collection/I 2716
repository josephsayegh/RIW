interface database algebra performance relational optimizing implementing smart interface approach view proposed support data relational idea employ programming automatic techniques basic interface efficiently analyzes high query level refines specification supplied interface algebra user called relational squiral designed approach minimize detail squiral query seeks response 1 time space utilization performing 2 optimization disjoint global query exploiting coordinating sort concurrency pipelined 3 orders directory temporary relations employing 4 maintaining 5 references locality page analysis implementing operators algorithms presented relational algebra codd composing methodology optimize query user performance optimization relational inverted database query automatic language programming high level data manipulation language 