simple based gedanken language typeless completeness principle concept reference gedanken experimental language programming 1 characteristics context permitted permissible context language meaningful values functions permissible labels results variables 2 assignment formalized addressing indirect called values turn possess reference introducing values assignment relation affects operation reference data 3 compound functions treated type 4 declarations structures data functional structures permitted approach data accepts references process insure accept structure regardless equivalent logically data internal structure generally representation implicit arbitrary giving existence algorithm components computing accessing coroutines variables permits label construction control mechanisms quasi parallel unorthodox processes examples illustrates variety programming generality language briefly discussed limitations extensions data structure assignment reference programming coroutine language applicative quasi process parallel language typeless nondeterministic processing calculus list algorithm lambda 