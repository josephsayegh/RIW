simple based gedanken language typeless completeness concept principle reference programming gedanken language experimental 1 context characteristics permitted context permissible language meaningful results functions values permissible labels assignment variables 2 indirect addressing formalized introducing turn called values reference possess values relation operation affects assignment reference data compound 3 treated structures functions 4 declarations type data permitted structures approach functional data references process accepts insure structure logically accept equivalent regardless structure representation data generally internal implicit arbitrary giving computing components accessing existence algorithm construction label permits variables coroutines quasi unorthodox parallel control processes mechanisms variety illustrates generality programming examples language limitations discussed extensions briefly structure data coroutine reference assignment programming language quasi parallel process applicative language typeless processing calculus lambda nondeterministic list algorithm 