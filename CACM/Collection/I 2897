technique study case compilers code generation optimizing techniques developments recent compilers emerge allowed design compiler source parsed code translates lower steps sequence level code step expands higher blocks level statements lower code performs level optimizations statement result tailoring task expansion take code cases advantage optimizations special evidence paper good object result code strategy pl traditionally statement difficult concatenate detailed fairly investigated set optimizations simple allow identified elaborate produce good compiler code optimizations code improve object code statement contexts concatenate compiler optimization produced expansion strategy compares favorably pl produced conventional code optimizing compiler compiler optimizing structure code pl generation compiler program concatenation optimization flow techniques data analysis 